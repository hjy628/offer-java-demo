package chap9.builder;


/**
 *
 *
 建造者模式（Builder Pattern）使用多个简单的对象创建一个复杂的对象，用于将一个复杂的构建与其表示分离，使得同样的构建过程可以创建不同的表示。
 然后通过一个Builder类(该Builder类是独立于其他对象的)创建最终的对象。

 建造者模式主要用于解决软件系统中复杂对象的创建问题，比如有些复杂对象的创建需要通过各部分子对象用一定的算法构成，在需求变化时这些复杂对象将面临很大的改变，
 这十分不利于系统的稳定。但是，使用建造者模式能将他们各部分的算法包装起来，在需求变化后只需要调整各个算法的组合方式和顺序，能极大提高系统的稳定性。
 常被用于一些基本部件不会变而其组合经常变化的应用场景下。

 其与工厂模式最大的区别是，建造者模式更关注产品的组合方式和装配顺序，而工厂模式关注产品的生产本身。

 建造者模式几种角色：
    Builder: 创建一个复杂产品对象的抽象接口
    ConcreteBuilder: Builder接口的实现类，用于定义复杂产品各个部件的装配流程。
    Director: 构造一个使用Builder接口的对象。
    Product: 表示被构造的复杂对象。ConcreteBuilder定义了该复杂对象的装配流程，而Product定义了该复杂对象的结构和内部表示。


 *
 *
 *
 * */