package chap9.strategy;

/**
 *
 策略模式(Strategy Pattern)
    为同一个行为定位了不同的策略，并为每种策略都实现了不同的方法。
    在用户使用的时候，系统根据不同的策略自动切换不同的方法来实现策略的改变。
    统一策略下的不同的方法是对同一功能的不同实现，因此在使用时可以相互替换而不影响用户的使用。

    实现是在接口中定义不同的策略，在实现类中完成了对不同策略下具体行为的实现，并将用户的策略状态存储在上下文(Context)中
    来完成策略的存储和状态的改变。


    场景一般使用多重if...else条件转移语句也可以实现，但属于硬编码方式，这样做不但会使代码复杂、难懂，
    而且在增加、删除、更换算法时都需要修改源代码，不易维护，违背了开闭原则。
    通过策略模式就能优雅地解决这些问题

 *
 *
 * */