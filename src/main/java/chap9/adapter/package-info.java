package chap9.adapter;


/**
 *
    适配器模式

        我们常常在开发中遇到各个系统之间的对接问题，然而每个系统的数据模型或多或少均存在差别，因此可能存在修改现有对象模型的情况，这将影响到系统的稳定。
        若想在不修改原有代码结构(类的结构)的情况下完成友好对接，就需要用到适配器模式。

    适配器模式(Adapter Pattern)通过定义一个适配器类作为两个不兼容的接口之间的桥梁，将一个类的接口转换成用户期望的另一个接口，
    使得两个或多个原本不兼容的接口可以基于适配器类一起工作。

    适配器模式主要通过适配器类实现各个接口之间的兼容，该类通过依赖注入或者继承实现各个接口的功能并对外统一提供服务。


    适配器模式的实现中有三种角色：Source、Targetable、Adapter。
        Source是待适配的类，Targetable是目标接口，Adapter是适配器。
    我们在具体应用中通过Adapter将Source的功能拓展到Targetable，以实现接口的兼容。
 适配器的实现主要分为三类： 类适配器模式、对象适配器模式、接口适配器模式。


    类适配器模式：
        在需要不改变(或者由于项目原因无法改变)原有接口或类结构的情况下扩展类的功能以适配不同的接口是，可以使用类的适配器模式。
        适配器模式通过创建一个继承原有类(需要扩展的类)并实现新接口的适配器类来实现。

    对象适配器模式：
        思路和类适配器模式基本相同，只是修改了Adapter类。Adapter类不再继承Source类，而是持有Source类的实例，以解决兼容性问题。

    接口适配器模式：
        在不希望实现一个接口中所有的方法时，可以创建一个抽象类AbstractAdapter实现所有方法，在使用时继承该抽象类按需实现方法即可。

 *
 *
 * */